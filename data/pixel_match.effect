uniform texture2d image;
layout (binding = 0, offset = 0) uniform atomic_uint match_counter;

uniform float4x4 ViewProj;
uniform float per_pixel_err_thresh;

sampler_state def_sampler {
        Filter   = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
};

struct VertInOut {
        float4 pos : POSITION;
        float2 uv  : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
        VertInOut vert_out;
        vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
        vert_out.uv  = vert_in.uv;
        return vert_out;
}

float4 PSDefault(VertInOut vert_in) : TARGET
{
    atomicCounterIncrement(match_counter);    
    uint val = atomicCounterMax(match_counter, 1);
    val = val + 1;
    float r = 0.0f;
    float g = 0.0f;
    float b = 0.0f;
    if (bool(val & 0x1))
      r = 1.0f;
    if (bool(val & 0x2))
      g = 1.0f;
    if (bool(val & 0x4))
      b = 1.0f;
    
    float4 ret;
    if (val == 1000) {
        ret = image.Sample(def_sampler, vert_in.uv);  
    } else {
        ret = float4(r, g, b, 1.0);
    }
    return ret;
}

technique Draw
{
  pass
  {
    vertex_shader = VSDefault(vert_in);
    pixel_shader = PSDefault(vert_in);
  }
}
