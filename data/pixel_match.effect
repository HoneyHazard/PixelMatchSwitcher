layout (binding = 0, offset = 0) uniform atomic_uint match_counter;

uniform texture2d image;
uniform float4x4 ViewProj;

uniform texture2d match_img;
uniform float per_pixel_err_thresh;
uniform bool debug;

sampler_state def_sampler {
    Filter   = Linear;
    AddressU = Clamp;
    AddressV = Clamp;
};

struct VertInOut {
    float4 pos : POSITION;
    float2 uv  : TEXCOORD0;
};

VertInOut VSDefault(VertInOut vert_in)
{
    VertInOut vert_out;
    vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
    vert_out.uv  = vert_in.uv;
    return vert_out;
}

float4 PSMatch(VertInOut vert_in) : TARGET
{
    float4 val = image.Sample(def_sampler, vert_in.uv);
    float4 cmp = match_img.Sample(def_sampler, vert_in.uv);
    bool cmp_on = cmp.r > 0 || cmp.g > 0 || cmp.b > 0;
    bool match_on = cmp_on && val.r > 0.05 && val.g > 0.05 && val.b > 0.05;
    if (match_on) {
        atomicCounterIncrement(match_counter);
    }

    if (debug && cmp_on) {
        if (match_on) {
            val = float4(0, 1, 0, 1);
        } else {
            val = float4(1, 0, 0, 1);
        }
    }

    return val;
}

technique Draw
{
    pass
    {
        vertex_shader = VSDefault(vert_in);
        pixel_shader = PSMatch(vert_in);
    }
}
